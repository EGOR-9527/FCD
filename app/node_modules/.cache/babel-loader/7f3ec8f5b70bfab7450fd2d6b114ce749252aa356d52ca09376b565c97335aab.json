{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\fcdTodoList\\\\app\\\\src\\\\widgets\\\\ui\\\\Selected.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { api } from '../../shared/api/todos';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Selected = () => {\n  _s();\n  const [completedTodos, setCompletedTodos] = useState([]); // Инициализация как пустой массив\n\n  const fetchCompletedTodos = async () => {\n    try {\n      const response = await api.getCompleted();\n      if (Array.isArray(response)) {\n        setCompletedTodos(response);\n      } else {\n        console.error('Ответ не является массивом:', response);\n      }\n    } catch (error) {\n      console.error('Ошибка при получении выполненных задач:', error);\n    }\n  };\n  useEffect(() => {\n    fetchCompletedTodos();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u0412\\u044B\\u043F\\u043E\\u043B\\u043D\\u0435\\u043D\\u043D\\u044B\\u0435 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), completedTodos && completedTodos.length > 0 ?\n    // Проверка на наличие данных\n    completedTodos.map(todo => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: todo.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u0421\\u0442\\u0430\\u0442\\u0443\\u0441: \", todo.completed ? 'Выполнено' : 'Не выполнено']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 25\n      }, this)]\n    }, todo.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 21\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u041D\\u0435\\u0442 \\u0432\\u044B\\u043F\\u043E\\u043B\\u043D\\u0435\\u043D\\u043D\\u044B\\u0445 \\u0437\\u0430\\u0434\\u0430\\u0447.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n_s(Selected, \"V+QuxduPSjqLrs/lZNS8iy9W3Tc=\");\n_c = Selected;\nvar _c;\n$RefreshReg$(_c, \"Selected\");","map":{"version":3,"names":["React","useEffect","useState","api","jsxDEV","_jsxDEV","Selected","_s","completedTodos","setCompletedTodos","fetchCompletedTodos","response","getCompleted","Array","isArray","console","error","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","todo","title","completed","id","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/fcdTodoList/app/src/widgets/ui/Selected.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { api } from '../../shared/api/todos';\r\n\r\nexport const Selected: React.FC = () => {\r\n    const [completedTodos, setCompletedTodos] = useState<any[]>([]); // Инициализация как пустой массив\r\n\r\n    const fetchCompletedTodos = async () => {\r\n        try {\r\n            const response = await api.getCompleted();\r\n            if (Array.isArray(response)) {\r\n                setCompletedTodos(response);\r\n            } else {\r\n                console.error('Ответ не является массивом:', response);\r\n            }\r\n        } catch (error) {\r\n            console.error('Ошибка при получении выполненных задач:', error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchCompletedTodos();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <h1>Выполненные задачи</h1>\r\n            {completedTodos && completedTodos.length > 0 ? ( // Проверка на наличие данных\r\n                completedTodos.map((todo) => (\r\n                    <div key={todo.id}>\r\n                        <h2>{todo.title}</h2>\r\n                        <p>Статус: {todo.completed ? 'Выполнено' : 'Не выполнено'}</p>\r\n                    </div>\r\n                ))\r\n            ) : (\r\n                <p>Нет выполненных задач.</p>\r\n            )}\r\n        </div>\r\n    );\r\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,GAAG,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,OAAO,MAAMC,QAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpC,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGP,QAAQ,CAAQ,EAAE,CAAC,CAAC,CAAC;;EAEjE,MAAMQ,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMR,GAAG,CAACS,YAAY,CAAC,CAAC;MACzC,IAAIC,KAAK,CAACC,OAAO,CAACH,QAAQ,CAAC,EAAE;QACzBF,iBAAiB,CAACE,QAAQ,CAAC;MAC/B,CAAC,MAAM;QACHI,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAEL,QAAQ,CAAC;MAC1D;IACJ,CAAC,CAAC,OAAOK,KAAK,EAAE;MACZD,OAAO,CAACC,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;IACnE;EACJ,CAAC;EAEDf,SAAS,CAAC,MAAM;IACZS,mBAAmB,CAAC,CAAC;EACzB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIL,OAAA;IAAAY,QAAA,gBACIZ,OAAA;MAAAY,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC1Bb,cAAc,IAAIA,cAAc,CAACc,MAAM,GAAG,CAAC;IAAK;IAC7Cd,cAAc,CAACe,GAAG,CAAEC,IAAI,iBACpBnB,OAAA;MAAAY,QAAA,gBACIZ,OAAA;QAAAY,QAAA,EAAKO,IAAI,CAACC;MAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACrBhB,OAAA;QAAAY,QAAA,GAAG,wCAAQ,EAACO,IAAI,CAACE,SAAS,GAAG,WAAW,GAAG,cAAc;MAAA;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA,GAFxDG,IAAI,CAACG,EAAE;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGZ,CACR,CAAC,gBAEFhB,OAAA;MAAAY,QAAA,EAAG;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAC/B;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAACd,EAAA,CAnCWD,QAAkB;AAAAsB,EAAA,GAAlBtB,QAAkB;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}