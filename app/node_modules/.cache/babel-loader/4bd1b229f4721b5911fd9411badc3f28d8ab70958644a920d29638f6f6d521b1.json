{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\fcdTodoList\\\\app\\\\src\\\\widgets\\\\ui\\\\AddCart.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useTodos } from \"../../shared/hooks/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AddCart = () => {\n  _s();\n  const {\n    addTodo\n  } = useTodos(); // Вызов хука\n  const [text, setText] = useState(\"\"); // Используем строку для состояния\n\n  const handleAddTodo = () => {\n    if (text.trim()) {\n      // Проверяем, что текст не пустой\n      const newTodo = {\n        id: Date.now(),\n        // Генерация уникального ID\n        title: text,\n        completed: false\n      };\n      addTodo(newTodo.id, newTodo.title, newTodo.completed);\n      setText(\"\"); // Очищаем поле ввода после добавления\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: text,\n      onChange: event => setText(event.target.value) // Устанавливаем текст\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddTodo,\n      children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n};\n_s(AddCart, \"nqNqTeV9lrjPK0htkyWOFVLQ01g=\", false, function () {\n  return [useTodos];\n});\n_c = AddCart;\nvar _c;\n$RefreshReg$(_c, \"AddCart\");","map":{"version":3,"names":["React","useState","useTodos","jsxDEV","_jsxDEV","AddCart","_s","addTodo","text","setText","handleAddTodo","trim","newTodo","id","Date","now","title","completed","children","type","value","onChange","event","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/fcdTodoList/app/src/widgets/ui/AddCart.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useTodos } from \"../../shared/hooks/index\";\r\n\r\nexport const AddCart: React.FC = () => {\r\n    const { addTodo } = useTodos(); // Вызов хука\r\n    const [text, setText] = useState(\"\"); // Используем строку для состояния\r\n\r\n    const handleAddTodo = () => {\r\n        if (text.trim()) { // Проверяем, что текст не пустой\r\n            const newTodo = {\r\n                id: Date.now(), // Генерация уникального ID\r\n                title: text,\r\n                completed: false,\r\n            };\r\n            addTodo(newTodo.id, newTodo.title, newTodo.completed);\r\n            setText(\"\"); // Очищаем поле ввода после добавления\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <input\r\n                type=\"text\"\r\n                value={text}\r\n                onChange={(event) => setText(event.target.value)} // Устанавливаем текст\r\n            />\r\n            <button onClick={handleAddTodo}>Добавить</button>\r\n        </div>\r\n    );\r\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,QAAQ,QAAQ,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,OAAO,MAAMC,OAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnC,MAAM;IAAEC;EAAQ,CAAC,GAAGL,QAAQ,CAAC,CAAC,CAAC,CAAC;EAChC,MAAM,CAACM,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEtC,MAAMS,aAAa,GAAGA,CAAA,KAAM;IACxB,IAAIF,IAAI,CAACG,IAAI,CAAC,CAAC,EAAE;MAAE;MACf,MAAMC,OAAO,GAAG;QACZC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;QAAE;QAChBC,KAAK,EAAER,IAAI;QACXS,SAAS,EAAE;MACf,CAAC;MACDV,OAAO,CAACK,OAAO,CAACC,EAAE,EAAED,OAAO,CAACI,KAAK,EAAEJ,OAAO,CAACK,SAAS,CAAC;MACrDR,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;IACjB;EACJ,CAAC;EAED,oBACIL,OAAA;IAAAc,QAAA,gBACId,OAAA;MACIe,IAAI,EAAC,MAAM;MACXC,KAAK,EAAEZ,IAAK;MACZa,QAAQ,EAAGC,KAAK,IAAKb,OAAO,CAACa,KAAK,CAACC,MAAM,CAACH,KAAK,CAAE,CAAC;IAAA;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrD,CAAC,eACFvB,OAAA;MAAQwB,OAAO,EAAElB,aAAc;MAAAQ,QAAA,EAAC;IAAQ;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChD,CAAC;AAEd,CAAC;AAACrB,EAAA,CA1BWD,OAAiB;EAAA,QACNH,QAAQ;AAAA;AAAA2B,EAAA,GADnBxB,OAAiB;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}