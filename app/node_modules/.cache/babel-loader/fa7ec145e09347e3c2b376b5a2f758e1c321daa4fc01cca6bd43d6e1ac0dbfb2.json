{"ast":null,"code":"import { $api } from \"./api\";\nconst handleError = error => {\n  if (error.response) {\n    console.log(\"Ошибка: \", error.response.data);\n  } else {\n    console.log(\"Ошибка сети: \", error.message);\n  }\n};\nexport class Api {\n  static async getTodos() {\n    try {\n      const response = await $api.get(\"getTodos\");\n      return response.data; // Now TypeScript knows response is AxiosResponse\n    } catch (error) {\n      handleError(error); // Handle the error appropriately\n      throw error; // Optionally rethrow the error if you want to propagate it\n    }\n  }\n  static async createTodo(title) {\n    try {\n      const response = await $api.post(\"createTodo\", {\n        title\n      });\n      return response.data; // Now TypeScript knows response is AxiosResponse\n    } catch (error) {\n      handleError(error); // Handle the error appropriately\n      throw error; // Optionally rethrow the error if you want to propagate it\n    }\n  }\n  static async updateTodo(id, title) {\n    try {\n      const response = await $api.put(`updateTodo/${id}`, {\n        title\n      });\n      return response.data; // Now TypeScript knows response is AxiosResponse\n    } catch (error) {\n      handleError(error); // Handle the error appropriately\n      throw error; // Optionally rethrow the error if you want to propagate it\n    }\n  }\n  static async completedTodo(id) {\n    try {\n      const response = await $api.put(`completedTodo/${id}`);\n      return response.data;\n    } catch (error) {\n      handleError(error);\n      throw error;\n    }\n  }\n  static async deleteTodo(id) {\n    try {\n      const response = await $api.delete(`deleteTodo/${id}`);\n      return response.data;\n    } catch (error) {\n      handleError(error);\n      throw error;\n    }\n  }\n  static async getCompleted() {\n    try {\n      const response = await $api.get(\"getSelected\");\n      return response.data;\n    } catch (error) {\n      handleError(error);\n      throw error;\n    }\n  }\n}","map":{"version":3,"names":["$api","handleError","error","response","console","log","data","message","Api","getTodos","get","createTodo","title","post","updateTodo","id","put","completedTodo","deleteTodo","delete","getCompleted"],"sources":["C:/Users/user/Desktop/fcdTodoList/app/src/shared/queriesClient.ts"],"sourcesContent":["import { $api } from \"./api\";\r\n\r\nconst handleError = (error: any) => {\r\n    if (error.response) {\r\n        console.log(\"Ошибка: \", error.response.data);\r\n    } else {\r\n        console.log(\"Ошибка сети: \", error.message);\r\n    }\r\n}\r\n\r\nexport class Api {\r\n\r\n\r\n    static async getTodos() {\r\n        try {\r\n            const response = await $api.get(\"getTodos\")\r\n            return response.data; // Now TypeScript knows response is AxiosResponse\r\n        } catch (error) {\r\n            handleError(error); // Handle the error appropriately\r\n            throw error; // Optionally rethrow the error if you want to propagate it\r\n        }\r\n    }\r\n\r\n    static async createTodo(title: string) {\r\n        try {\r\n            const response = await $api.post(\"createTodo\", { title })\r\n            return response.data; // Now TypeScript knows response is AxiosResponse\r\n        } catch (error) {\r\n            handleError(error); // Handle the error appropriately\r\n            throw error; // Optionally rethrow the error if you want to propagate it\r\n        }\r\n    }\r\n\r\n    static async updateTodo(id: string, title: string) {\r\n        try {\r\n            const response = await $api.put(`updateTodo/${id}`, { title });\r\n            return response.data; // Now TypeScript knows response is AxiosResponse\r\n        } catch (error) {\r\n            handleError(error); // Handle the error appropriately\r\n            throw error; // Optionally rethrow the error if you want to propagate it\r\n        }\r\n    }\r\n    \r\n    static async completedTodo(id: string) {\r\n        try {\r\n            const response = await $api.put(`completedTodo/${id}`);\r\n            return response.data;\r\n        } catch (error) {\r\n            handleError(error);\r\n            throw error;\r\n        }\r\n    }\r\n    \r\n    static async deleteTodo(id: string) {\r\n        try {\r\n            const response = await $api.delete(`deleteTodo/${id}`);\r\n            return response.data;\r\n        } catch (error) {\r\n            handleError(error);\r\n            throw error;\r\n        }\r\n    }\r\n    \r\n    static async getCompleted() {\r\n        try {\r\n            const response = await $api.get(\"getSelected\");\r\n            return response.data;\r\n        } catch (error) {\r\n            handleError(error);\r\n            throw error;\r\n        }\r\n    }\r\n}"],"mappings":"AAAA,SAASA,IAAI,QAAQ,OAAO;AAE5B,MAAMC,WAAW,GAAIC,KAAU,IAAK;EAChC,IAAIA,KAAK,CAACC,QAAQ,EAAE;IAChBC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEH,KAAK,CAACC,QAAQ,CAACG,IAAI,CAAC;EAChD,CAAC,MAAM;IACHF,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEH,KAAK,CAACK,OAAO,CAAC;EAC/C;AACJ,CAAC;AAED,OAAO,MAAMC,GAAG,CAAC;EAGb,aAAaC,QAAQA,CAAA,EAAG;IACpB,IAAI;MACA,MAAMN,QAAQ,GAAG,MAAMH,IAAI,CAACU,GAAG,CAAC,UAAU,CAAC;MAC3C,OAAOP,QAAQ,CAACG,IAAI,CAAC,CAAC;IAC1B,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACZD,WAAW,CAACC,KAAK,CAAC,CAAC,CAAC;MACpB,MAAMA,KAAK,CAAC,CAAC;IACjB;EACJ;EAEA,aAAaS,UAAUA,CAACC,KAAa,EAAE;IACnC,IAAI;MACA,MAAMT,QAAQ,GAAG,MAAMH,IAAI,CAACa,IAAI,CAAC,YAAY,EAAE;QAAED;MAAM,CAAC,CAAC;MACzD,OAAOT,QAAQ,CAACG,IAAI,CAAC,CAAC;IAC1B,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACZD,WAAW,CAACC,KAAK,CAAC,CAAC,CAAC;MACpB,MAAMA,KAAK,CAAC,CAAC;IACjB;EACJ;EAEA,aAAaY,UAAUA,CAACC,EAAU,EAAEH,KAAa,EAAE;IAC/C,IAAI;MACA,MAAMT,QAAQ,GAAG,MAAMH,IAAI,CAACgB,GAAG,CAAC,cAAcD,EAAE,EAAE,EAAE;QAAEH;MAAM,CAAC,CAAC;MAC9D,OAAOT,QAAQ,CAACG,IAAI,CAAC,CAAC;IAC1B,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACZD,WAAW,CAACC,KAAK,CAAC,CAAC,CAAC;MACpB,MAAMA,KAAK,CAAC,CAAC;IACjB;EACJ;EAEA,aAAae,aAAaA,CAACF,EAAU,EAAE;IACnC,IAAI;MACA,MAAMZ,QAAQ,GAAG,MAAMH,IAAI,CAACgB,GAAG,CAAC,iBAAiBD,EAAE,EAAE,CAAC;MACtD,OAAOZ,QAAQ,CAACG,IAAI;IACxB,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACZD,WAAW,CAACC,KAAK,CAAC;MAClB,MAAMA,KAAK;IACf;EACJ;EAEA,aAAagB,UAAUA,CAACH,EAAU,EAAE;IAChC,IAAI;MACA,MAAMZ,QAAQ,GAAG,MAAMH,IAAI,CAACmB,MAAM,CAAC,cAAcJ,EAAE,EAAE,CAAC;MACtD,OAAOZ,QAAQ,CAACG,IAAI;IACxB,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACZD,WAAW,CAACC,KAAK,CAAC;MAClB,MAAMA,KAAK;IACf;EACJ;EAEA,aAAakB,YAAYA,CAAA,EAAG;IACxB,IAAI;MACA,MAAMjB,QAAQ,GAAG,MAAMH,IAAI,CAACU,GAAG,CAAC,aAAa,CAAC;MAC9C,OAAOP,QAAQ,CAACG,IAAI;IACxB,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACZD,WAAW,CAACC,KAAK,CAAC;MAClB,MAAMA,KAAK;IACf;EACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}